/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type OrderResponseStruct = {
  encodedWormholeMessage: PromiseOrValue<BytesLike>;
  circleBridgeMessage: PromiseOrValue<BytesLike>;
  circleAttestation: PromiseOrValue<BytesLike>;
};

export type OrderResponseStructOutput = [string, string, string] & {
  encodedWormholeMessage: string;
  circleBridgeMessage: string;
  circleAttestation: string;
};

export declare namespace INativeSwap {
  export type ExactInParametersStruct = {
    amountIn: PromiseOrValue<BigNumberish>;
    amountOutMinimum: PromiseOrValue<BigNumberish>;
    targetAmountOutMinimum: PromiseOrValue<BigNumberish>;
    targetChainRecipient: PromiseOrValue<BytesLike>;
    deadline: PromiseOrValue<BigNumberish>;
    poolFee: PromiseOrValue<BigNumberish>;
  };

  export type ExactInParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    number
  ] & {
    amountIn: BigNumber;
    amountOutMinimum: BigNumber;
    targetAmountOutMinimum: BigNumber;
    targetChainRecipient: string;
    deadline: BigNumber;
    poolFee: number;
  };
}

export interface INativeSwapInterface extends utils.Interface {
  functions: {
    "handleOrderRevert((bytes,bytes,bytes))": FunctionFragment;
    "recvAndSwapExactNativeIn((bytes,bytes,bytes))": FunctionFragment;
    "registerContract(uint16,bytes32)": FunctionFragment;
    "setRelayerFee(uint16,uint256)": FunctionFragment;
    "swapExactNativeInAndTransfer((uint256,uint256,uint256,bytes32,uint256,uint24),address[],uint16,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "handleOrderRevert"
      | "recvAndSwapExactNativeIn"
      | "registerContract"
      | "setRelayerFee"
      | "swapExactNativeInAndTransfer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "handleOrderRevert",
    values: [OrderResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "recvAndSwapExactNativeIn",
    values: [OrderResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "registerContract",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelayerFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactNativeInAndTransfer",
    values: [
      INativeSwap.ExactInParametersStruct,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "handleOrderRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recvAndSwapExactNativeIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRelayerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactNativeInAndTransfer",
    data: BytesLike
  ): Result;

  events: {};
}

export interface INativeSwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: INativeSwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    handleOrderRevert(
      response: OrderResponseStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recvAndSwapExactNativeIn(
      orderResponse: OrderResponseStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerContract(
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRelayerFee(
      chainId: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactNativeInAndTransfer(
      swapParams: INativeSwap.ExactInParametersStruct,
      path: PromiseOrValue<string>[],
      targetChainId: PromiseOrValue<BigNumberish>,
      wormholeSlippage: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  handleOrderRevert(
    response: OrderResponseStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recvAndSwapExactNativeIn(
    orderResponse: OrderResponseStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerContract(
    chainId: PromiseOrValue<BigNumberish>,
    contractAddress: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRelayerFee(
    chainId: PromiseOrValue<BigNumberish>,
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactNativeInAndTransfer(
    swapParams: INativeSwap.ExactInParametersStruct,
    path: PromiseOrValue<string>[],
    targetChainId: PromiseOrValue<BigNumberish>,
    wormholeSlippage: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    handleOrderRevert(
      response: OrderResponseStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    recvAndSwapExactNativeIn(
      orderResponse: OrderResponseStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    registerContract(
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRelayerFee(
      chainId: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactNativeInAndTransfer(
      swapParams: INativeSwap.ExactInParametersStruct,
      path: PromiseOrValue<string>[],
      targetChainId: PromiseOrValue<BigNumberish>,
      wormholeSlippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    handleOrderRevert(
      response: OrderResponseStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recvAndSwapExactNativeIn(
      orderResponse: OrderResponseStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerContract(
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRelayerFee(
      chainId: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactNativeInAndTransfer(
      swapParams: INativeSwap.ExactInParametersStruct,
      path: PromiseOrValue<string>[],
      targetChainId: PromiseOrValue<BigNumberish>,
      wormholeSlippage: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    handleOrderRevert(
      response: OrderResponseStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recvAndSwapExactNativeIn(
      orderResponse: OrderResponseStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerContract(
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRelayerFee(
      chainId: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactNativeInAndTransfer(
      swapParams: INativeSwap.ExactInParametersStruct,
      path: PromiseOrValue<string>[],
      targetChainId: PromiseOrValue<BigNumberish>,
      wormholeSlippage: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
