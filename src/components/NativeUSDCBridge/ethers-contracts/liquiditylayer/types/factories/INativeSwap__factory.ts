/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { INativeSwap, INativeSwapInterface } from "../INativeSwap";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "encodedWormholeMessage",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "circleBridgeMessage",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "circleAttestation",
            type: "bytes",
          },
        ],
        internalType: "struct OrderResponse",
        name: "response",
        type: "tuple",
      },
    ],
    name: "handleOrderRevert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "encodedWormholeMessage",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "circleBridgeMessage",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "circleAttestation",
            type: "bytes",
          },
        ],
        internalType: "struct OrderResponse",
        name: "orderResponse",
        type: "tuple",
      },
    ],
    name: "recvAndSwapExactNativeIn",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "chainId",
        type: "uint16",
      },
      {
        internalType: "bytes32",
        name: "contractAddress",
        type: "bytes32",
      },
    ],
    name: "registerContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "chainId",
        type: "uint16",
      },
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "setRelayerFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOutMinimum",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "targetAmountOutMinimum",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "targetChainRecipient",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint24",
            name: "poolFee",
            type: "uint24",
          },
        ],
        internalType: "struct INativeSwap.ExactInParameters",
        name: "swapParams",
        type: "tuple",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "uint16",
        name: "targetChainId",
        type: "uint16",
      },
      {
        internalType: "uint256",
        name: "wormholeSlippage",
        type: "uint256",
      },
    ],
    name: "swapExactNativeInAndTransfer",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class INativeSwap__factory {
  static readonly abi = _abi;
  static createInterface(): INativeSwapInterface {
    return new utils.Interface(_abi) as INativeSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): INativeSwap {
    return new Contract(address, _abi, signerOrProvider) as INativeSwap;
  }
}
