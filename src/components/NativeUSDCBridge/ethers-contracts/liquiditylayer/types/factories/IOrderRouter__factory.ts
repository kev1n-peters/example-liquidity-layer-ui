/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IOrderRouter, IOrderRouterInterface } from "../IOrderRouter";

const _abi = [
  {
    inputs: [],
    name: "MAX_AMOUNT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAX_NUM_RELAYERS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAX_SLIPPAGE",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MIN_SLIPPAGE",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "chain",
        type: "uint16",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "endpoint",
            type: "bytes32",
          },
          {
            internalType: "enum TokenType",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "uint24",
            name: "slippage",
            type: "uint24",
          },
        ],
        internalType: "struct RouterInfo",
        name: "info",
        type: "tuple",
      },
    ],
    name: "addRouterInfo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "canonicalTokenAddress",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "canonicalTokenChain",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint16",
        name: "targetChain",
        type: "uint16",
      },
      {
        internalType: "uint24",
        name: "slippage",
        type: "uint24",
      },
      {
        internalType: "uint256",
        name: "relayerFee",
        type: "uint256",
      },
    ],
    name: "computeMinAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "defaultRelayerFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeployer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwnerAssistant",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "chain",
        type: "uint16",
      },
    ],
    name: "getRouterInfo",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "endpoint",
            type: "bytes32",
          },
          {
            internalType: "enum TokenType",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "uint24",
            name: "slippage",
            type: "uint24",
          },
        ],
        internalType: "struct RouterInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "fillHash",
        type: "bytes32",
      },
    ],
    name: "isFillRedeemed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "matchingEngineChain",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "matchingEngineEndpoint",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "orderToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minAmountOut",
            type: "uint256",
          },
          {
            internalType: "uint16",
            name: "targetChain",
            type: "uint16",
          },
          {
            internalType: "bytes32",
            name: "redeemer",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "redeemerMessage",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "refundAddress",
            type: "address",
          },
        ],
        internalType: "struct PlaceMarketOrderArgs",
        name: "args",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "relayerFee",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "allowedRelayers",
        type: "bytes32[]",
      },
    ],
    name: "placeMarketOrder",
    outputs: [
      {
        internalType: "uint64",
        name: "sequence",
        type: "uint64",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minAmountOut",
            type: "uint256",
          },
          {
            internalType: "uint16",
            name: "targetChain",
            type: "uint16",
          },
          {
            internalType: "bytes32",
            name: "redeemer",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "redeemerMessage",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "refundAddress",
            type: "address",
          },
        ],
        internalType: "struct PlaceMarketOrderArgs",
        name: "args",
        type: "tuple",
      },
    ],
    name: "placeMarketOrder",
    outputs: [
      {
        internalType: "uint64",
        name: "sequence",
        type: "uint64",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "encodedWormholeMessage",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "circleBridgeMessage",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "circleAttestation",
            type: "bytes",
          },
        ],
        internalType: "struct OrderResponse",
        name: "response",
        type: "tuple",
      },
    ],
    name: "redeemFill",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "sender",
            type: "bytes32",
          },
          {
            internalType: "uint16",
            name: "senderChain",
            type: "uint16",
          },
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes",
          },
        ],
        internalType: "struct RedeemedFill",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "encodedWormholeMessage",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "circleBridgeMessage",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "circleAttestation",
            type: "bytes",
          },
        ],
        internalType: "struct OrderResponse",
        name: "response",
        type: "tuple",
      },
    ],
    name: "redeemOrderRevert",
    outputs: [
      {
        internalType: "enum RevertType",
        name: "",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenBridge",
    outputs: [
      {
        internalType: "contract ITokenBridge",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenType",
    outputs: [
      {
        internalType: "enum TokenType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "updateDefaultRelayerFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "chain",
            type: "uint16",
          },
          {
            internalType: "uint24",
            name: "slippage",
            type: "uint24",
          },
        ],
        internalType: "struct SlippageUpdate[]",
        name: "update",
        type: "tuple[]",
      },
    ],
    name: "updateSlippage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "wormholeCctp",
    outputs: [
      {
        internalType: "contract ICircleIntegration",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wormholeChainId",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IOrderRouter__factory {
  static readonly abi = _abi;
  static createInterface(): IOrderRouterInterface {
    return new utils.Interface(_abi) as IOrderRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IOrderRouter {
    return new Contract(address, _abi, signerOrProvider) as IOrderRouter;
  }
}
