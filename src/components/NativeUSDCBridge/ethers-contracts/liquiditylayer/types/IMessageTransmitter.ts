/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IMessageTransmitterInterface extends utils.Interface {
  functions: {
    "attesterManager()": FunctionFragment;
    "availableNonces(uint32)": FunctionFragment;
    "disableAttester(address)": FunctionFragment;
    "enableAttester(address)": FunctionFragment;
    "getEnabledAttester(uint256)": FunctionFragment;
    "getNumEnabledAttesters()": FunctionFragment;
    "isEnabledAttester(address)": FunctionFragment;
    "localDomain()": FunctionFragment;
    "maxMessageBodySize()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "pauser()": FunctionFragment;
    "receiveMessage(bytes,bytes)": FunctionFragment;
    "rescuer()": FunctionFragment;
    "setSignatureThreshold(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAttesterManager(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "attesterManager"
      | "availableNonces"
      | "disableAttester"
      | "enableAttester"
      | "getEnabledAttester"
      | "getNumEnabledAttesters"
      | "isEnabledAttester"
      | "localDomain"
      | "maxMessageBodySize"
      | "owner"
      | "paused"
      | "pauser"
      | "receiveMessage"
      | "rescuer"
      | "setSignatureThreshold"
      | "transferOwnership"
      | "updateAttesterManager"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "attesterManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "availableNonces",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disableAttester",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableAttester",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEnabledAttester",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumEnabledAttesters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEnabledAttester",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "localDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxMessageBodySize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pauser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveMessage",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "rescuer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setSignatureThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAttesterManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "attesterManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableAttester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableAttester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnabledAttester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumEnabledAttesters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEnabledAttester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "localDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxMessageBodySize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSignatureThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAttesterManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "MessageSent(bytes)": EventFragment;
    "MintAndWithdraw(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MessageSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintAndWithdraw"): EventFragment;
}

export interface MessageSentEventObject {
  message: string;
}
export type MessageSentEvent = TypedEvent<[string], MessageSentEventObject>;

export type MessageSentEventFilter = TypedEventFilter<MessageSentEvent>;

export interface MintAndWithdrawEventObject {
  _mintRecipient: string;
  _amount: BigNumber;
  _mintToken: string;
}
export type MintAndWithdrawEvent = TypedEvent<
  [string, BigNumber, string],
  MintAndWithdrawEventObject
>;

export type MintAndWithdrawEventFilter = TypedEventFilter<MintAndWithdrawEvent>;

export interface IMessageTransmitter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMessageTransmitterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    attesterManager(overrides?: CallOverrides): Promise<[string]>;

    availableNonces(
      domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    disableAttester(
      _attester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableAttester(
      _attester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getEnabledAttester(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNumEnabledAttesters(overrides?: CallOverrides): Promise<[BigNumber]>;

    isEnabledAttester(
      _attester: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    localDomain(overrides?: CallOverrides): Promise<[number]>;

    maxMessageBodySize(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pauser(overrides?: CallOverrides): Promise<[string]>;

    receiveMessage(
      _message: PromiseOrValue<BytesLike>,
      _attestation: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rescuer(overrides?: CallOverrides): Promise<[string]>;

    setSignatureThreshold(
      newSignatureThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAttesterManager(
      _newAttesterManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[number]>;
  };

  attesterManager(overrides?: CallOverrides): Promise<string>;

  availableNonces(
    domain: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  disableAttester(
    _attester: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableAttester(
    _attester: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getEnabledAttester(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getNumEnabledAttesters(overrides?: CallOverrides): Promise<BigNumber>;

  isEnabledAttester(
    _attester: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  localDomain(overrides?: CallOverrides): Promise<number>;

  maxMessageBodySize(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pauser(overrides?: CallOverrides): Promise<string>;

  receiveMessage(
    _message: PromiseOrValue<BytesLike>,
    _attestation: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rescuer(overrides?: CallOverrides): Promise<string>;

  setSignatureThreshold(
    newSignatureThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAttesterManager(
    _newAttesterManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    attesterManager(overrides?: CallOverrides): Promise<string>;

    availableNonces(
      domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableAttester(
      _attester: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    enableAttester(
      _attester: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getEnabledAttester(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getNumEnabledAttesters(overrides?: CallOverrides): Promise<BigNumber>;

    isEnabledAttester(
      _attester: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    localDomain(overrides?: CallOverrides): Promise<number>;

    maxMessageBodySize(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pauser(overrides?: CallOverrides): Promise<string>;

    receiveMessage(
      _message: PromiseOrValue<BytesLike>,
      _attestation: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rescuer(overrides?: CallOverrides): Promise<string>;

    setSignatureThreshold(
      newSignatureThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAttesterManager(
      _newAttesterManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "MessageSent(bytes)"(message?: null): MessageSentEventFilter;
    MessageSent(message?: null): MessageSentEventFilter;

    "MintAndWithdraw(address,uint256,address)"(
      _mintRecipient?: null,
      _amount?: null,
      _mintToken?: null
    ): MintAndWithdrawEventFilter;
    MintAndWithdraw(
      _mintRecipient?: null,
      _amount?: null,
      _mintToken?: null
    ): MintAndWithdrawEventFilter;
  };

  estimateGas: {
    attesterManager(overrides?: CallOverrides): Promise<BigNumber>;

    availableNonces(
      domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableAttester(
      _attester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableAttester(
      _attester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getEnabledAttester(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumEnabledAttesters(overrides?: CallOverrides): Promise<BigNumber>;

    isEnabledAttester(
      _attester: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    localDomain(overrides?: CallOverrides): Promise<BigNumber>;

    maxMessageBodySize(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pauser(overrides?: CallOverrides): Promise<BigNumber>;

    receiveMessage(
      _message: PromiseOrValue<BytesLike>,
      _attestation: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rescuer(overrides?: CallOverrides): Promise<BigNumber>;

    setSignatureThreshold(
      newSignatureThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAttesterManager(
      _newAttesterManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    attesterManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    availableNonces(
      domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableAttester(
      _attester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableAttester(
      _attester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getEnabledAttester(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumEnabledAttesters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEnabledAttester(
      _attester: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    localDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxMessageBodySize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiveMessage(
      _message: PromiseOrValue<BytesLike>,
      _attestation: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rescuer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setSignatureThreshold(
      newSignatureThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAttesterManager(
      _newAttesterManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
