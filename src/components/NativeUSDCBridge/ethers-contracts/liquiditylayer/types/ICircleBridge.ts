/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ICircleBridgeInterface extends utils.Interface {
  functions: {
    "depositForBurn(uint256,uint32,bytes32,address)": FunctionFragment;
    "depositForBurnWithCaller(uint256,uint32,bytes32,address,bytes32)": FunctionFragment;
    "handleReceiveMessage(uint32,bytes32,bytes)": FunctionFragment;
    "localMessageTransmitter()": FunctionFragment;
    "localMinter()": FunctionFragment;
    "owner()": FunctionFragment;
    "remoteCircleBridges(uint32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "depositForBurn"
      | "depositForBurnWithCaller"
      | "handleReceiveMessage"
      | "localMessageTransmitter"
      | "localMinter"
      | "owner"
      | "remoteCircleBridges"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositForBurn",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositForBurnWithCaller",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "handleReceiveMessage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "localMessageTransmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "localMinter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "remoteCircleBridges",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositForBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositForBurnWithCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleReceiveMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "localMessageTransmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "localMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remoteCircleBridges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ICircleBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICircleBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositForBurn(
      _amount: PromiseOrValue<BigNumberish>,
      _destinationDomain: PromiseOrValue<BigNumberish>,
      _mintRecipient: PromiseOrValue<BytesLike>,
      _burnToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositForBurnWithCaller(
      _amount: PromiseOrValue<BigNumberish>,
      _destinationDomain: PromiseOrValue<BigNumberish>,
      _mintRecipient: PromiseOrValue<BytesLike>,
      _burnToken: PromiseOrValue<string>,
      _destinationCaller: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    handleReceiveMessage(
      _remoteDomain: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<BytesLike>,
      messageBody: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    localMessageTransmitter(overrides?: CallOverrides): Promise<[string]>;

    localMinter(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    remoteCircleBridges(
      domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  depositForBurn(
    _amount: PromiseOrValue<BigNumberish>,
    _destinationDomain: PromiseOrValue<BigNumberish>,
    _mintRecipient: PromiseOrValue<BytesLike>,
    _burnToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositForBurnWithCaller(
    _amount: PromiseOrValue<BigNumberish>,
    _destinationDomain: PromiseOrValue<BigNumberish>,
    _mintRecipient: PromiseOrValue<BytesLike>,
    _burnToken: PromiseOrValue<string>,
    _destinationCaller: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  handleReceiveMessage(
    _remoteDomain: PromiseOrValue<BigNumberish>,
    _sender: PromiseOrValue<BytesLike>,
    messageBody: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  localMessageTransmitter(overrides?: CallOverrides): Promise<string>;

  localMinter(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  remoteCircleBridges(
    domain: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    depositForBurn(
      _amount: PromiseOrValue<BigNumberish>,
      _destinationDomain: PromiseOrValue<BigNumberish>,
      _mintRecipient: PromiseOrValue<BytesLike>,
      _burnToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositForBurnWithCaller(
      _amount: PromiseOrValue<BigNumberish>,
      _destinationDomain: PromiseOrValue<BigNumberish>,
      _mintRecipient: PromiseOrValue<BytesLike>,
      _burnToken: PromiseOrValue<string>,
      _destinationCaller: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleReceiveMessage(
      _remoteDomain: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<BytesLike>,
      messageBody: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    localMessageTransmitter(overrides?: CallOverrides): Promise<string>;

    localMinter(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    remoteCircleBridges(
      domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    depositForBurn(
      _amount: PromiseOrValue<BigNumberish>,
      _destinationDomain: PromiseOrValue<BigNumberish>,
      _mintRecipient: PromiseOrValue<BytesLike>,
      _burnToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositForBurnWithCaller(
      _amount: PromiseOrValue<BigNumberish>,
      _destinationDomain: PromiseOrValue<BigNumberish>,
      _mintRecipient: PromiseOrValue<BytesLike>,
      _burnToken: PromiseOrValue<string>,
      _destinationCaller: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    handleReceiveMessage(
      _remoteDomain: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<BytesLike>,
      messageBody: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    localMessageTransmitter(overrides?: CallOverrides): Promise<BigNumber>;

    localMinter(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    remoteCircleBridges(
      domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositForBurn(
      _amount: PromiseOrValue<BigNumberish>,
      _destinationDomain: PromiseOrValue<BigNumberish>,
      _mintRecipient: PromiseOrValue<BytesLike>,
      _burnToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositForBurnWithCaller(
      _amount: PromiseOrValue<BigNumberish>,
      _destinationDomain: PromiseOrValue<BigNumberish>,
      _mintRecipient: PromiseOrValue<BytesLike>,
      _burnToken: PromiseOrValue<string>,
      _destinationCaller: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    handleReceiveMessage(
      _remoteDomain: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<BytesLike>,
      messageBody: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    localMessageTransmitter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    localMinter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remoteCircleBridges(
      domain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
