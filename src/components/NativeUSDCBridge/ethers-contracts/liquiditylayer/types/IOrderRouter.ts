/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type RouterInfoStruct = {
  endpoint: PromiseOrValue<BytesLike>;
  tokenType: PromiseOrValue<BigNumberish>;
  slippage: PromiseOrValue<BigNumberish>;
};

export type RouterInfoStructOutput = [string, number, number] & {
  endpoint: string;
  tokenType: number;
  slippage: number;
};

export type PlaceMarketOrderArgsStruct = {
  amountIn: PromiseOrValue<BigNumberish>;
  minAmountOut: PromiseOrValue<BigNumberish>;
  targetChain: PromiseOrValue<BigNumberish>;
  redeemer: PromiseOrValue<BytesLike>;
  redeemerMessage: PromiseOrValue<BytesLike>;
  refundAddress: PromiseOrValue<string>;
};

export type PlaceMarketOrderArgsStructOutput = [
  BigNumber,
  BigNumber,
  number,
  string,
  string,
  string
] & {
  amountIn: BigNumber;
  minAmountOut: BigNumber;
  targetChain: number;
  redeemer: string;
  redeemerMessage: string;
  refundAddress: string;
};

export type OrderResponseStruct = {
  encodedWormholeMessage: PromiseOrValue<BytesLike>;
  circleBridgeMessage: PromiseOrValue<BytesLike>;
  circleAttestation: PromiseOrValue<BytesLike>;
};

export type OrderResponseStructOutput = [string, string, string] & {
  encodedWormholeMessage: string;
  circleBridgeMessage: string;
  circleAttestation: string;
};

export type RedeemedFillStruct = {
  sender: PromiseOrValue<BytesLike>;
  senderChain: PromiseOrValue<BigNumberish>;
  token: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  message: PromiseOrValue<BytesLike>;
};

export type RedeemedFillStructOutput = [
  string,
  number,
  string,
  BigNumber,
  string
] & {
  sender: string;
  senderChain: number;
  token: string;
  amount: BigNumber;
  message: string;
};

export type SlippageUpdateStruct = {
  chain: PromiseOrValue<BigNumberish>;
  slippage: PromiseOrValue<BigNumberish>;
};

export type SlippageUpdateStructOutput = [number, number] & {
  chain: number;
  slippage: number;
};

export interface IOrderRouterInterface extends utils.Interface {
  functions: {
    "MAX_AMOUNT()": FunctionFragment;
    "MAX_NUM_RELAYERS()": FunctionFragment;
    "MAX_SLIPPAGE()": FunctionFragment;
    "MIN_SLIPPAGE()": FunctionFragment;
    "addRouterInfo(uint16,(bytes32,uint8,uint24))": FunctionFragment;
    "canonicalTokenAddress()": FunctionFragment;
    "canonicalTokenChain()": FunctionFragment;
    "computeMinAmountOut(uint256,uint16,uint24,uint256)": FunctionFragment;
    "defaultRelayerFee()": FunctionFragment;
    "getDeployer()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getOwnerAssistant()": FunctionFragment;
    "getRouterInfo(uint16)": FunctionFragment;
    "isFillRedeemed(bytes32)": FunctionFragment;
    "matchingEngineChain()": FunctionFragment;
    "matchingEngineEndpoint()": FunctionFragment;
    "orderToken()": FunctionFragment;
    "placeMarketOrder((uint256,uint256,uint16,bytes32,bytes,address),uint256,bytes32[])": FunctionFragment;
    "placeMarketOrder((uint256,uint256,uint16,bytes32,bytes,address))": FunctionFragment;
    "redeemFill((bytes,bytes,bytes))": FunctionFragment;
    "redeemOrderRevert((bytes,bytes,bytes))": FunctionFragment;
    "tokenBridge()": FunctionFragment;
    "tokenType()": FunctionFragment;
    "updateDefaultRelayerFee(uint256)": FunctionFragment;
    "updateSlippage((uint16,uint24)[])": FunctionFragment;
    "upgradeContract(address)": FunctionFragment;
    "wormholeCctp()": FunctionFragment;
    "wormholeChainId()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_AMOUNT"
      | "MAX_NUM_RELAYERS"
      | "MAX_SLIPPAGE"
      | "MIN_SLIPPAGE"
      | "addRouterInfo"
      | "canonicalTokenAddress"
      | "canonicalTokenChain"
      | "computeMinAmountOut"
      | "defaultRelayerFee"
      | "getDeployer"
      | "getOwner"
      | "getOwnerAssistant"
      | "getRouterInfo"
      | "isFillRedeemed"
      | "matchingEngineChain"
      | "matchingEngineEndpoint"
      | "orderToken"
      | "placeMarketOrder((uint256,uint256,uint16,bytes32,bytes,address),uint256,bytes32[])"
      | "placeMarketOrder((uint256,uint256,uint16,bytes32,bytes,address))"
      | "redeemFill"
      | "redeemOrderRevert"
      | "tokenBridge"
      | "tokenType"
      | "updateDefaultRelayerFee"
      | "updateSlippage"
      | "upgradeContract"
      | "wormholeCctp"
      | "wormholeChainId"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_NUM_RELAYERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SLIPPAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_SLIPPAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRouterInfo",
    values: [PromiseOrValue<BigNumberish>, RouterInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "canonicalTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canonicalTokenChain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeMinAmountOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultRelayerFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOwnerAssistant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRouterInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFillRedeemed",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "matchingEngineChain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "matchingEngineEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orderToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "placeMarketOrder((uint256,uint256,uint16,bytes32,bytes,address),uint256,bytes32[])",
    values: [
      PlaceMarketOrderArgsStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "placeMarketOrder((uint256,uint256,uint16,bytes32,bytes,address))",
    values: [PlaceMarketOrderArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFill",
    values: [OrderResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemOrderRevert",
    values: [OrderResponseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBridge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDefaultRelayerFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSlippage",
    values: [SlippageUpdateStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wormholeCctp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wormholeChainId",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "MAX_AMOUNT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_NUM_RELAYERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SLIPPAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_SLIPPAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRouterInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canonicalTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canonicalTokenChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeMinAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultRelayerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerAssistant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRouterInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFillRedeemed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchingEngineChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchingEngineEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeMarketOrder((uint256,uint256,uint16,bytes32,bytes,address),uint256,bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeMarketOrder((uint256,uint256,uint16,bytes32,bytes,address))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemFill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemOrderRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDefaultRelayerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wormholeCctp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wormholeChainId",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IOrderRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOrderRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_NUM_RELAYERS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_SLIPPAGE(overrides?: CallOverrides): Promise<[number]>;

    MIN_SLIPPAGE(overrides?: CallOverrides): Promise<[number]>;

    addRouterInfo(
      chain: PromiseOrValue<BigNumberish>,
      info: RouterInfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canonicalTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    canonicalTokenChain(overrides?: CallOverrides): Promise<[number]>;

    computeMinAmountOut(
      amountIn: PromiseOrValue<BigNumberish>,
      targetChain: PromiseOrValue<BigNumberish>,
      slippage: PromiseOrValue<BigNumberish>,
      relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    defaultRelayerFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDeployer(overrides?: CallOverrides): Promise<[string]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getOwnerAssistant(overrides?: CallOverrides): Promise<[string]>;

    getRouterInfo(
      chain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[RouterInfoStructOutput]>;

    isFillRedeemed(
      fillHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    matchingEngineChain(overrides?: CallOverrides): Promise<[number]>;

    matchingEngineEndpoint(overrides?: CallOverrides): Promise<[string]>;

    orderToken(overrides?: CallOverrides): Promise<[string]>;

    "placeMarketOrder((uint256,uint256,uint16,bytes32,bytes,address),uint256,bytes32[])"(
      args: PlaceMarketOrderArgsStruct,
      relayerFee: PromiseOrValue<BigNumberish>,
      allowedRelayers: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "placeMarketOrder((uint256,uint256,uint16,bytes32,bytes,address))"(
      args: PlaceMarketOrderArgsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemFill(
      response: OrderResponseStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemOrderRevert(
      response: OrderResponseStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenBridge(overrides?: CallOverrides): Promise<[string]>;

    tokenType(overrides?: CallOverrides): Promise<[number]>;

    updateDefaultRelayerFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSlippage(
      update: SlippageUpdateStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeContract(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wormholeCctp(overrides?: CallOverrides): Promise<[string]>;

    wormholeChainId(overrides?: CallOverrides): Promise<[number]>;
  };

  MAX_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_NUM_RELAYERS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_SLIPPAGE(overrides?: CallOverrides): Promise<number>;

  MIN_SLIPPAGE(overrides?: CallOverrides): Promise<number>;

  addRouterInfo(
    chain: PromiseOrValue<BigNumberish>,
    info: RouterInfoStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canonicalTokenAddress(overrides?: CallOverrides): Promise<string>;

  canonicalTokenChain(overrides?: CallOverrides): Promise<number>;

  computeMinAmountOut(
    amountIn: PromiseOrValue<BigNumberish>,
    targetChain: PromiseOrValue<BigNumberish>,
    slippage: PromiseOrValue<BigNumberish>,
    relayerFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  defaultRelayerFee(overrides?: CallOverrides): Promise<BigNumber>;

  getDeployer(overrides?: CallOverrides): Promise<string>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getOwnerAssistant(overrides?: CallOverrides): Promise<string>;

  getRouterInfo(
    chain: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<RouterInfoStructOutput>;

  isFillRedeemed(
    fillHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  matchingEngineChain(overrides?: CallOverrides): Promise<number>;

  matchingEngineEndpoint(overrides?: CallOverrides): Promise<string>;

  orderToken(overrides?: CallOverrides): Promise<string>;

  "placeMarketOrder((uint256,uint256,uint16,bytes32,bytes,address),uint256,bytes32[])"(
    args: PlaceMarketOrderArgsStruct,
    relayerFee: PromiseOrValue<BigNumberish>,
    allowedRelayers: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "placeMarketOrder((uint256,uint256,uint16,bytes32,bytes,address))"(
    args: PlaceMarketOrderArgsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemFill(
    response: OrderResponseStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemOrderRevert(
    response: OrderResponseStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenBridge(overrides?: CallOverrides): Promise<string>;

  tokenType(overrides?: CallOverrides): Promise<number>;

  updateDefaultRelayerFee(
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSlippage(
    update: SlippageUpdateStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeContract(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wormholeCctp(overrides?: CallOverrides): Promise<string>;

  wormholeChainId(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    MAX_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_NUM_RELAYERS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SLIPPAGE(overrides?: CallOverrides): Promise<number>;

    MIN_SLIPPAGE(overrides?: CallOverrides): Promise<number>;

    addRouterInfo(
      chain: PromiseOrValue<BigNumberish>,
      info: RouterInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    canonicalTokenAddress(overrides?: CallOverrides): Promise<string>;

    canonicalTokenChain(overrides?: CallOverrides): Promise<number>;

    computeMinAmountOut(
      amountIn: PromiseOrValue<BigNumberish>,
      targetChain: PromiseOrValue<BigNumberish>,
      slippage: PromiseOrValue<BigNumberish>,
      relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultRelayerFee(overrides?: CallOverrides): Promise<BigNumber>;

    getDeployer(overrides?: CallOverrides): Promise<string>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getOwnerAssistant(overrides?: CallOverrides): Promise<string>;

    getRouterInfo(
      chain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<RouterInfoStructOutput>;

    isFillRedeemed(
      fillHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    matchingEngineChain(overrides?: CallOverrides): Promise<number>;

    matchingEngineEndpoint(overrides?: CallOverrides): Promise<string>;

    orderToken(overrides?: CallOverrides): Promise<string>;

    "placeMarketOrder((uint256,uint256,uint16,bytes32,bytes,address),uint256,bytes32[])"(
      args: PlaceMarketOrderArgsStruct,
      relayerFee: PromiseOrValue<BigNumberish>,
      allowedRelayers: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "placeMarketOrder((uint256,uint256,uint16,bytes32,bytes,address))"(
      args: PlaceMarketOrderArgsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemFill(
      response: OrderResponseStruct,
      overrides?: CallOverrides
    ): Promise<RedeemedFillStructOutput>;

    redeemOrderRevert(
      response: OrderResponseStruct,
      overrides?: CallOverrides
    ): Promise<[number, string]>;

    tokenBridge(overrides?: CallOverrides): Promise<string>;

    tokenType(overrides?: CallOverrides): Promise<number>;

    updateDefaultRelayerFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSlippage(
      update: SlippageUpdateStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeContract(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    wormholeCctp(overrides?: CallOverrides): Promise<string>;

    wormholeChainId(overrides?: CallOverrides): Promise<number>;
  };

  filters: {};

  estimateGas: {
    MAX_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_NUM_RELAYERS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SLIPPAGE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_SLIPPAGE(overrides?: CallOverrides): Promise<BigNumber>;

    addRouterInfo(
      chain: PromiseOrValue<BigNumberish>,
      info: RouterInfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canonicalTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    canonicalTokenChain(overrides?: CallOverrides): Promise<BigNumber>;

    computeMinAmountOut(
      amountIn: PromiseOrValue<BigNumberish>,
      targetChain: PromiseOrValue<BigNumberish>,
      slippage: PromiseOrValue<BigNumberish>,
      relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultRelayerFee(overrides?: CallOverrides): Promise<BigNumber>;

    getDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getOwnerAssistant(overrides?: CallOverrides): Promise<BigNumber>;

    getRouterInfo(
      chain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFillRedeemed(
      fillHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchingEngineChain(overrides?: CallOverrides): Promise<BigNumber>;

    matchingEngineEndpoint(overrides?: CallOverrides): Promise<BigNumber>;

    orderToken(overrides?: CallOverrides): Promise<BigNumber>;

    "placeMarketOrder((uint256,uint256,uint16,bytes32,bytes,address),uint256,bytes32[])"(
      args: PlaceMarketOrderArgsStruct,
      relayerFee: PromiseOrValue<BigNumberish>,
      allowedRelayers: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "placeMarketOrder((uint256,uint256,uint16,bytes32,bytes,address))"(
      args: PlaceMarketOrderArgsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemFill(
      response: OrderResponseStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemOrderRevert(
      response: OrderResponseStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenBridge(overrides?: CallOverrides): Promise<BigNumber>;

    tokenType(overrides?: CallOverrides): Promise<BigNumber>;

    updateDefaultRelayerFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSlippage(
      update: SlippageUpdateStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeContract(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wormholeCctp(overrides?: CallOverrides): Promise<BigNumber>;

    wormholeChainId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_NUM_RELAYERS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_SLIPPAGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_SLIPPAGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRouterInfo(
      chain: PromiseOrValue<BigNumberish>,
      info: RouterInfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canonicalTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canonicalTokenChain(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeMinAmountOut(
      amountIn: PromiseOrValue<BigNumberish>,
      targetChain: PromiseOrValue<BigNumberish>,
      slippage: PromiseOrValue<BigNumberish>,
      relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultRelayerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwnerAssistant(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRouterInfo(
      chain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFillRedeemed(
      fillHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchingEngineChain(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchingEngineEndpoint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "placeMarketOrder((uint256,uint256,uint16,bytes32,bytes,address),uint256,bytes32[])"(
      args: PlaceMarketOrderArgsStruct,
      relayerFee: PromiseOrValue<BigNumberish>,
      allowedRelayers: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "placeMarketOrder((uint256,uint256,uint16,bytes32,bytes,address))"(
      args: PlaceMarketOrderArgsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemFill(
      response: OrderResponseStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemOrderRevert(
      response: OrderResponseStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateDefaultRelayerFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSlippage(
      update: SlippageUpdateStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeContract(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wormholeCctp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wormholeChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
