/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Structs {
  export type GuardianSetStruct = {
    keys: PromiseOrValue<string>[];
    expirationTime: PromiseOrValue<BigNumberish>;
  };

  export type GuardianSetStructOutput = [string[], number] & {
    keys: string[];
    expirationTime: number;
  };

  export type SignatureStruct = {
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
    v: PromiseOrValue<BigNumberish>;
    guardianIndex: PromiseOrValue<BigNumberish>;
  };

  export type SignatureStructOutput = [string, string, number, number] & {
    r: string;
    s: string;
    v: number;
    guardianIndex: number;
  };

  export type VMStruct = {
    version: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    nonce: PromiseOrValue<BigNumberish>;
    emitterChainId: PromiseOrValue<BigNumberish>;
    emitterAddress: PromiseOrValue<BytesLike>;
    sequence: PromiseOrValue<BigNumberish>;
    consistencyLevel: PromiseOrValue<BigNumberish>;
    payload: PromiseOrValue<BytesLike>;
    guardianSetIndex: PromiseOrValue<BigNumberish>;
    signatures: Structs.SignatureStruct[];
    hash: PromiseOrValue<BytesLike>;
  };

  export type VMStructOutput = [
    number,
    number,
    number,
    number,
    string,
    BigNumber,
    number,
    string,
    number,
    Structs.SignatureStructOutput[],
    string
  ] & {
    version: number;
    timestamp: number;
    nonce: number;
    emitterChainId: number;
    emitterAddress: string;
    sequence: BigNumber;
    consistencyLevel: number;
    payload: string;
    guardianSetIndex: number;
    signatures: Structs.SignatureStructOutput[];
    hash: string;
  };
}

export declare namespace GovernanceStructs {
  export type ContractUpgradeStruct = {
    module: PromiseOrValue<BytesLike>;
    action: PromiseOrValue<BigNumberish>;
    chain: PromiseOrValue<BigNumberish>;
    newContract: PromiseOrValue<string>;
  };

  export type ContractUpgradeStructOutput = [string, number, number, string] & {
    module: string;
    action: number;
    chain: number;
    newContract: string;
  };

  export type GuardianSetUpgradeStruct = {
    module: PromiseOrValue<BytesLike>;
    action: PromiseOrValue<BigNumberish>;
    chain: PromiseOrValue<BigNumberish>;
    newGuardianSet: Structs.GuardianSetStruct;
    newGuardianSetIndex: PromiseOrValue<BigNumberish>;
  };

  export type GuardianSetUpgradeStructOutput = [
    string,
    number,
    number,
    Structs.GuardianSetStructOutput,
    number
  ] & {
    module: string;
    action: number;
    chain: number;
    newGuardianSet: Structs.GuardianSetStructOutput;
    newGuardianSetIndex: number;
  };

  export type RecoverChainIdStruct = {
    module: PromiseOrValue<BytesLike>;
    action: PromiseOrValue<BigNumberish>;
    evmChainId: PromiseOrValue<BigNumberish>;
    newChainId: PromiseOrValue<BigNumberish>;
  };

  export type RecoverChainIdStructOutput = [
    string,
    number,
    BigNumber,
    number
  ] & {
    module: string;
    action: number;
    evmChainId: BigNumber;
    newChainId: number;
  };

  export type SetMessageFeeStruct = {
    module: PromiseOrValue<BytesLike>;
    action: PromiseOrValue<BigNumberish>;
    chain: PromiseOrValue<BigNumberish>;
    messageFee: PromiseOrValue<BigNumberish>;
  };

  export type SetMessageFeeStructOutput = [
    string,
    number,
    number,
    BigNumber
  ] & { module: string; action: number; chain: number; messageFee: BigNumber };

  export type TransferFeesStruct = {
    module: PromiseOrValue<BytesLike>;
    action: PromiseOrValue<BigNumberish>;
    chain: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<BytesLike>;
  };

  export type TransferFeesStructOutput = [
    string,
    number,
    number,
    BigNumber,
    string
  ] & {
    module: string;
    action: number;
    chain: number;
    amount: BigNumber;
    recipient: string;
  };
}

export interface ImplementationInterface extends utils.Interface {
  functions: {
    "chainId()": FunctionFragment;
    "evmChainId()": FunctionFragment;
    "getCurrentGuardianSetIndex()": FunctionFragment;
    "getGuardianSet(uint32)": FunctionFragment;
    "getGuardianSetExpiry()": FunctionFragment;
    "governanceActionIsConsumed(bytes32)": FunctionFragment;
    "governanceChainId()": FunctionFragment;
    "governanceContract()": FunctionFragment;
    "isFork()": FunctionFragment;
    "isInitialized(address)": FunctionFragment;
    "messageFee()": FunctionFragment;
    "nextSequence(address)": FunctionFragment;
    "parseAndVerifyVM(bytes)": FunctionFragment;
    "parseContractUpgrade(bytes)": FunctionFragment;
    "parseGuardianSetUpgrade(bytes)": FunctionFragment;
    "parseRecoverChainId(bytes)": FunctionFragment;
    "parseSetMessageFee(bytes)": FunctionFragment;
    "parseTransferFees(bytes)": FunctionFragment;
    "parseVM(bytes)": FunctionFragment;
    "quorum(uint256)": FunctionFragment;
    "submitContractUpgrade(bytes)": FunctionFragment;
    "submitNewGuardianSet(bytes)": FunctionFragment;
    "submitRecoverChainId(bytes)": FunctionFragment;
    "submitSetMessageFee(bytes)": FunctionFragment;
    "submitTransferFees(bytes)": FunctionFragment;
    "verifySignatures(bytes32,(bytes32,bytes32,uint8,uint8)[],(address[],uint32))": FunctionFragment;
    "verifyVM((uint8,uint32,uint32,uint16,bytes32,uint64,uint8,bytes,uint32,(bytes32,bytes32,uint8,uint8)[],bytes32))": FunctionFragment;
    "publishMessage(uint32,bytes,uint8)": FunctionFragment;
    "initialize()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "chainId"
      | "evmChainId"
      | "getCurrentGuardianSetIndex"
      | "getGuardianSet"
      | "getGuardianSetExpiry"
      | "governanceActionIsConsumed"
      | "governanceChainId"
      | "governanceContract"
      | "isFork"
      | "isInitialized"
      | "messageFee"
      | "nextSequence"
      | "parseAndVerifyVM"
      | "parseContractUpgrade"
      | "parseGuardianSetUpgrade"
      | "parseRecoverChainId"
      | "parseSetMessageFee"
      | "parseTransferFees"
      | "parseVM"
      | "quorum"
      | "submitContractUpgrade"
      | "submitNewGuardianSet"
      | "submitRecoverChainId"
      | "submitSetMessageFee"
      | "submitTransferFees"
      | "verifySignatures"
      | "verifyVM"
      | "publishMessage"
      | "initialize"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "evmChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentGuardianSetIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGuardianSet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGuardianSetExpiry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceActionIsConsumed",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isFork", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "messageFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextSequence",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseAndVerifyVM",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseContractUpgrade",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseGuardianSetUpgrade",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseRecoverChainId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseSetMessageFee",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseTransferFees",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseVM",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "quorum",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitContractUpgrade",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitNewGuardianSet",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitRecoverChainId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitSetMessageFee",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTransferFees",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySignatures",
    values: [
      PromiseOrValue<BytesLike>,
      Structs.SignatureStruct[],
      Structs.GuardianSetStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyVM",
    values: [Structs.VMStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "publishMessage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "evmChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentGuardianSetIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGuardianSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGuardianSetExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceActionIsConsumed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messageFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextSequence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseAndVerifyVM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseContractUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseGuardianSetUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseRecoverChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseSetMessageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseTransferFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "parseVM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitContractUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitNewGuardianSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitRecoverChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitSetMessageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTransferFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyVM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ContractUpgraded(address,address)": EventFragment;
    "GuardianSetAdded(uint32)": EventFragment;
    "LogMessagePublished(address,uint64,uint32,bytes,uint8)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianSetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMessagePublished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface ContractUpgradedEventObject {
  oldContract: string;
  newContract: string;
}
export type ContractUpgradedEvent = TypedEvent<
  [string, string],
  ContractUpgradedEventObject
>;

export type ContractUpgradedEventFilter =
  TypedEventFilter<ContractUpgradedEvent>;

export interface GuardianSetAddedEventObject {
  index: number;
}
export type GuardianSetAddedEvent = TypedEvent<
  [number],
  GuardianSetAddedEventObject
>;

export type GuardianSetAddedEventFilter =
  TypedEventFilter<GuardianSetAddedEvent>;

export interface LogMessagePublishedEventObject {
  sender: string;
  sequence: BigNumber;
  nonce: number;
  payload: string;
  consistencyLevel: number;
}
export type LogMessagePublishedEvent = TypedEvent<
  [string, BigNumber, number, string, number],
  LogMessagePublishedEventObject
>;

export type LogMessagePublishedEventFilter =
  TypedEventFilter<LogMessagePublishedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Implementation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ImplementationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    chainId(overrides?: CallOverrides): Promise<[number]>;

    evmChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentGuardianSetIndex(overrides?: CallOverrides): Promise<[number]>;

    getGuardianSet(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Structs.GuardianSetStructOutput]>;

    getGuardianSetExpiry(overrides?: CallOverrides): Promise<[number]>;

    governanceActionIsConsumed(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    governanceChainId(overrides?: CallOverrides): Promise<[number]>;

    governanceContract(overrides?: CallOverrides): Promise<[string]>;

    isFork(overrides?: CallOverrides): Promise<[boolean]>;

    isInitialized(
      impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    messageFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextSequence(
      emitter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * parseAndVerifyVM serves to parse an encodedVM and wholy validate it for consumption
     */
    parseAndVerifyVM(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [Structs.VMStructOutput, boolean, string] & {
        vm: Structs.VMStructOutput;
        valid: boolean;
        reason: string;
      }
    >;

    /**
     * Parse a contract upgrade (action 1) with minimal validation
     */
    parseContractUpgrade(
      encodedUpgrade: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [GovernanceStructs.ContractUpgradeStructOutput] & {
        cu: GovernanceStructs.ContractUpgradeStructOutput;
      }
    >;

    /**
     * Parse a guardianSet upgrade (action 2) with minimal validation
     */
    parseGuardianSetUpgrade(
      encodedUpgrade: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [GovernanceStructs.GuardianSetUpgradeStructOutput] & {
        gsu: GovernanceStructs.GuardianSetUpgradeStructOutput;
      }
    >;

    /**
     * Parse a recoverChainId (action 5) with minimal validation
     */
    parseRecoverChainId(
      encodedRecoverChainId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [GovernanceStructs.RecoverChainIdStructOutput] & {
        rci: GovernanceStructs.RecoverChainIdStructOutput;
      }
    >;

    /**
     * Parse a setMessageFee (action 3) with minimal validation
     */
    parseSetMessageFee(
      encodedSetMessageFee: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [GovernanceStructs.SetMessageFeeStructOutput] & {
        smf: GovernanceStructs.SetMessageFeeStructOutput;
      }
    >;

    /**
     * Parse a transferFees (action 4) with minimal validation
     */
    parseTransferFees(
      encodedTransferFees: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [GovernanceStructs.TransferFeesStructOutput] & {
        tf: GovernanceStructs.TransferFeesStructOutput;
      }
    >;

    /**
     * parseVM serves to parse an encodedVM into a vm struct  - it intentionally performs no validation functions, it simply parses raw into a struct
     */
    parseVM(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[Structs.VMStructOutput] & { vm: Structs.VMStructOutput }>;

    /**
     * quorum serves solely to determine the number of signatures required to acheive quorum
     */
    quorum(
      numGuardians: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numSignaturesRequiredForQuorum: BigNumber }>;

    /**
     * Upgrades a contract via Governance VAA/VM
     */
    submitContractUpgrade(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Deploys a new `guardianSet` via Governance VAA/VM
     */
    submitNewGuardianSet(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Updates the `chainId` and `evmChainId` on a forked chain via Governance VAA/VM
     */
    submitRecoverChainId(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Sets a `messageFee` via Governance VAA/VM
     */
    submitSetMessageFee(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Submits transfer fees to the recipient via Governance VAA/VM
     */
    submitTransferFees(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifySignatures(
      hash: PromiseOrValue<BytesLike>,
      signatures: Structs.SignatureStruct[],
      guardianSet: Structs.GuardianSetStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { valid: boolean; reason: string }>;

    verifyVM(
      vm: Structs.VMStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { valid: boolean; reason: string }>;

    publishMessage(
      nonce: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      consistencyLevel: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  chainId(overrides?: CallOverrides): Promise<number>;

  evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentGuardianSetIndex(overrides?: CallOverrides): Promise<number>;

  getGuardianSet(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Structs.GuardianSetStructOutput>;

  getGuardianSetExpiry(overrides?: CallOverrides): Promise<number>;

  governanceActionIsConsumed(
    hash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  governanceChainId(overrides?: CallOverrides): Promise<number>;

  governanceContract(overrides?: CallOverrides): Promise<string>;

  isFork(overrides?: CallOverrides): Promise<boolean>;

  isInitialized(
    impl: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  messageFee(overrides?: CallOverrides): Promise<BigNumber>;

  nextSequence(
    emitter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * parseAndVerifyVM serves to parse an encodedVM and wholy validate it for consumption
   */
  parseAndVerifyVM(
    encodedVM: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [Structs.VMStructOutput, boolean, string] & {
      vm: Structs.VMStructOutput;
      valid: boolean;
      reason: string;
    }
  >;

  /**
   * Parse a contract upgrade (action 1) with minimal validation
   */
  parseContractUpgrade(
    encodedUpgrade: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<GovernanceStructs.ContractUpgradeStructOutput>;

  /**
   * Parse a guardianSet upgrade (action 2) with minimal validation
   */
  parseGuardianSetUpgrade(
    encodedUpgrade: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<GovernanceStructs.GuardianSetUpgradeStructOutput>;

  /**
   * Parse a recoverChainId (action 5) with minimal validation
   */
  parseRecoverChainId(
    encodedRecoverChainId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<GovernanceStructs.RecoverChainIdStructOutput>;

  /**
   * Parse a setMessageFee (action 3) with minimal validation
   */
  parseSetMessageFee(
    encodedSetMessageFee: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<GovernanceStructs.SetMessageFeeStructOutput>;

  /**
   * Parse a transferFees (action 4) with minimal validation
   */
  parseTransferFees(
    encodedTransferFees: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<GovernanceStructs.TransferFeesStructOutput>;

  /**
   * parseVM serves to parse an encodedVM into a vm struct  - it intentionally performs no validation functions, it simply parses raw into a struct
   */
  parseVM(
    encodedVM: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<Structs.VMStructOutput>;

  /**
   * quorum serves solely to determine the number of signatures required to acheive quorum
   */
  quorum(
    numGuardians: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Upgrades a contract via Governance VAA/VM
   */
  submitContractUpgrade(
    _vm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Deploys a new `guardianSet` via Governance VAA/VM
   */
  submitNewGuardianSet(
    _vm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Updates the `chainId` and `evmChainId` on a forked chain via Governance VAA/VM
   */
  submitRecoverChainId(
    _vm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Sets a `messageFee` via Governance VAA/VM
   */
  submitSetMessageFee(
    _vm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Submits transfer fees to the recipient via Governance VAA/VM
   */
  submitTransferFees(
    _vm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifySignatures(
    hash: PromiseOrValue<BytesLike>,
    signatures: Structs.SignatureStruct[],
    guardianSet: Structs.GuardianSetStruct,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { valid: boolean; reason: string }>;

  verifyVM(
    vm: Structs.VMStruct,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { valid: boolean; reason: string }>;

  publishMessage(
    nonce: PromiseOrValue<BigNumberish>,
    payload: PromiseOrValue<BytesLike>,
    consistencyLevel: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    chainId(overrides?: CallOverrides): Promise<number>;

    evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentGuardianSetIndex(overrides?: CallOverrides): Promise<number>;

    getGuardianSet(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Structs.GuardianSetStructOutput>;

    getGuardianSetExpiry(overrides?: CallOverrides): Promise<number>;

    governanceActionIsConsumed(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    governanceChainId(overrides?: CallOverrides): Promise<number>;

    governanceContract(overrides?: CallOverrides): Promise<string>;

    isFork(overrides?: CallOverrides): Promise<boolean>;

    isInitialized(
      impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    messageFee(overrides?: CallOverrides): Promise<BigNumber>;

    nextSequence(
      emitter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * parseAndVerifyVM serves to parse an encodedVM and wholy validate it for consumption
     */
    parseAndVerifyVM(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [Structs.VMStructOutput, boolean, string] & {
        vm: Structs.VMStructOutput;
        valid: boolean;
        reason: string;
      }
    >;

    /**
     * Parse a contract upgrade (action 1) with minimal validation
     */
    parseContractUpgrade(
      encodedUpgrade: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<GovernanceStructs.ContractUpgradeStructOutput>;

    /**
     * Parse a guardianSet upgrade (action 2) with minimal validation
     */
    parseGuardianSetUpgrade(
      encodedUpgrade: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<GovernanceStructs.GuardianSetUpgradeStructOutput>;

    /**
     * Parse a recoverChainId (action 5) with minimal validation
     */
    parseRecoverChainId(
      encodedRecoverChainId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<GovernanceStructs.RecoverChainIdStructOutput>;

    /**
     * Parse a setMessageFee (action 3) with minimal validation
     */
    parseSetMessageFee(
      encodedSetMessageFee: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<GovernanceStructs.SetMessageFeeStructOutput>;

    /**
     * Parse a transferFees (action 4) with minimal validation
     */
    parseTransferFees(
      encodedTransferFees: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<GovernanceStructs.TransferFeesStructOutput>;

    /**
     * parseVM serves to parse an encodedVM into a vm struct  - it intentionally performs no validation functions, it simply parses raw into a struct
     */
    parseVM(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<Structs.VMStructOutput>;

    /**
     * quorum serves solely to determine the number of signatures required to acheive quorum
     */
    quorum(
      numGuardians: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Upgrades a contract via Governance VAA/VM
     */
    submitContractUpgrade(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Deploys a new `guardianSet` via Governance VAA/VM
     */
    submitNewGuardianSet(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Updates the `chainId` and `evmChainId` on a forked chain via Governance VAA/VM
     */
    submitRecoverChainId(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sets a `messageFee` via Governance VAA/VM
     */
    submitSetMessageFee(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Submits transfer fees to the recipient via Governance VAA/VM
     */
    submitTransferFees(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifySignatures(
      hash: PromiseOrValue<BytesLike>,
      signatures: Structs.SignatureStruct[],
      guardianSet: Structs.GuardianSetStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { valid: boolean; reason: string }>;

    verifyVM(
      vm: Structs.VMStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { valid: boolean; reason: string }>;

    publishMessage(
      nonce: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      consistencyLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "ContractUpgraded(address,address)"(
      oldContract?: PromiseOrValue<string> | null,
      newContract?: PromiseOrValue<string> | null
    ): ContractUpgradedEventFilter;
    ContractUpgraded(
      oldContract?: PromiseOrValue<string> | null,
      newContract?: PromiseOrValue<string> | null
    ): ContractUpgradedEventFilter;

    "GuardianSetAdded(uint32)"(
      index?: PromiseOrValue<BigNumberish> | null
    ): GuardianSetAddedEventFilter;
    GuardianSetAdded(
      index?: PromiseOrValue<BigNumberish> | null
    ): GuardianSetAddedEventFilter;

    "LogMessagePublished(address,uint64,uint32,bytes,uint8)"(
      sender?: PromiseOrValue<string> | null,
      sequence?: null,
      nonce?: null,
      payload?: null,
      consistencyLevel?: null
    ): LogMessagePublishedEventFilter;
    LogMessagePublished(
      sender?: PromiseOrValue<string> | null,
      sequence?: null,
      nonce?: null,
      payload?: null,
      consistencyLevel?: null
    ): LogMessagePublishedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentGuardianSetIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getGuardianSet(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGuardianSetExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    governanceActionIsConsumed(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceChainId(overrides?: CallOverrides): Promise<BigNumber>;

    governanceContract(overrides?: CallOverrides): Promise<BigNumber>;

    isFork(overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(
      impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageFee(overrides?: CallOverrides): Promise<BigNumber>;

    nextSequence(
      emitter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * parseAndVerifyVM serves to parse an encodedVM and wholy validate it for consumption
     */
    parseAndVerifyVM(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Parse a contract upgrade (action 1) with minimal validation
     */
    parseContractUpgrade(
      encodedUpgrade: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Parse a guardianSet upgrade (action 2) with minimal validation
     */
    parseGuardianSetUpgrade(
      encodedUpgrade: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Parse a recoverChainId (action 5) with minimal validation
     */
    parseRecoverChainId(
      encodedRecoverChainId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Parse a setMessageFee (action 3) with minimal validation
     */
    parseSetMessageFee(
      encodedSetMessageFee: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Parse a transferFees (action 4) with minimal validation
     */
    parseTransferFees(
      encodedTransferFees: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * parseVM serves to parse an encodedVM into a vm struct  - it intentionally performs no validation functions, it simply parses raw into a struct
     */
    parseVM(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * quorum serves solely to determine the number of signatures required to acheive quorum
     */
    quorum(
      numGuardians: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Upgrades a contract via Governance VAA/VM
     */
    submitContractUpgrade(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Deploys a new `guardianSet` via Governance VAA/VM
     */
    submitNewGuardianSet(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Updates the `chainId` and `evmChainId` on a forked chain via Governance VAA/VM
     */
    submitRecoverChainId(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Sets a `messageFee` via Governance VAA/VM
     */
    submitSetMessageFee(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Submits transfer fees to the recipient via Governance VAA/VM
     */
    submitTransferFees(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifySignatures(
      hash: PromiseOrValue<BytesLike>,
      signatures: Structs.SignatureStruct[],
      guardianSet: Structs.GuardianSetStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyVM(
      vm: Structs.VMStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publishMessage(
      nonce: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      consistencyLevel: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    evmChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentGuardianSetIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGuardianSet(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGuardianSetExpiry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceActionIsConsumed(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFork(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInitialized(
      impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextSequence(
      emitter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * parseAndVerifyVM serves to parse an encodedVM and wholy validate it for consumption
     */
    parseAndVerifyVM(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Parse a contract upgrade (action 1) with minimal validation
     */
    parseContractUpgrade(
      encodedUpgrade: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Parse a guardianSet upgrade (action 2) with minimal validation
     */
    parseGuardianSetUpgrade(
      encodedUpgrade: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Parse a recoverChainId (action 5) with minimal validation
     */
    parseRecoverChainId(
      encodedRecoverChainId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Parse a setMessageFee (action 3) with minimal validation
     */
    parseSetMessageFee(
      encodedSetMessageFee: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Parse a transferFees (action 4) with minimal validation
     */
    parseTransferFees(
      encodedTransferFees: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * parseVM serves to parse an encodedVM into a vm struct  - it intentionally performs no validation functions, it simply parses raw into a struct
     */
    parseVM(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * quorum serves solely to determine the number of signatures required to acheive quorum
     */
    quorum(
      numGuardians: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Upgrades a contract via Governance VAA/VM
     */
    submitContractUpgrade(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Deploys a new `guardianSet` via Governance VAA/VM
     */
    submitNewGuardianSet(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Updates the `chainId` and `evmChainId` on a forked chain via Governance VAA/VM
     */
    submitRecoverChainId(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Sets a `messageFee` via Governance VAA/VM
     */
    submitSetMessageFee(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Submits transfer fees to the recipient via Governance VAA/VM
     */
    submitTransferFees(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifySignatures(
      hash: PromiseOrValue<BytesLike>,
      signatures: Structs.SignatureStruct[],
      guardianSet: Structs.GuardianSetStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyVM(
      vm: Structs.VMStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publishMessage(
      nonce: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      consistencyLevel: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
